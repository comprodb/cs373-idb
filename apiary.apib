FORMAT: 1A
HOST: http://comprodb.apiblueprint.org/

# ComProDB

ComProDB is a database for all things competitive programming.

#Group Users

## All Users [/users]

Return a container consisting of all competitive programmers on Codeforces.
- Each user will consist of the following fields:
    - handle: The online username identifying this user as a string
    - name: The first and last name of this user as a string
    - rank: The string representation of this user's rank (e.g. Specialist, Candidate Master)
    - rating: An integer representing this user's online ranking similar to Elo rankings
    - registration_time: A long-integer representing the unix-date of this user's registration

### List All Users [GET]

+ Response 200 (application/json)

        [
            {
                "handle":"Staticity",
                "name":"Jaime Rivera"
                "rank":"specialist",
                "rating":1530,
                "registration_time":1458786850,
            },
            {
                "handle":"arknave",
                "name":"Arnav Sastry",
                "rank":"expert",
                "rating":1766,
                "registration_time":1363182302
            },
            {
                "handle":"dtalamas24",
                "name":"Daniel Talamas",
                "rank":"candidate master",
                "rating":2029,
                "registration_time":1343162470
            },
        ]
        
## Single User [/users/{handle}]

Returns a single user object when a string handle is specified.

+ Parameters
    + handle (string) - Unique username of specified user

### Get User By Handle [GET]

+ Response 200 (application/json)

        {
            "handle":"arknave",
            "name":"Arnav Sastry",
            "rank":"expert",
            "rating":1766,
            "registration_time":1363182302
        }
        

#Group Contests        

## All Contests [/contests]


Return a container consisting of all Codeforces sponsored contests.

- Each contest will consist of the following fields:
    - id: The unique number of contests preceding this contest
    - participants: The number users that participated live in this contest
    - problems: The number of problems in this competition
    - name: The contest name as a string
    - date: A long-integer representing the unix-date of this contest's start date
    
### List All Contests [GET]

+ Response 200 (application/json)

        [
            {
                "id":379,
                "participants":12481,
                "problems":7
                "name":"Good Bye 2013",
                "date":1343162470
            },
            {
                "id":477,
                "participants":5321,
                "problems":7
                "name":"Codeforces Round #272",
                "date":1343532469
            },
            {
                "id":480,
                "participants":9580,
                "problems":6
                "name":"Codeforces Round #274",
                "date":1335162422
            },
        ]


## Single Contest [/contests/{contest_id}]
Returns a single contest object when an integer contest id is specified.

+ Parameters
    + contest_id (number) - Unique id of the specified contest

### Get Contest by ID [GET]

+ Response 200 (application/json)

        {
            "id":480,
            "participants":9580,
            "problems":6
            "name":"Codeforces Round #274",
            "date":1335162422
        }


#Group Problems

## All Problems [/problems]

Return a container consisting of all Codeforces contest problems.

- Each problem will consist of the following fields:
    - name: The name of the problem as a string
    - index: The index/difficulty of the problem with its respective contest division
    - contest_id: The unique id of the contest this problem belongs
    - tags: A list of strings representing the different types of problem strategies that can be used to solve this problem
    - points: The number of points this problem granted in the past contest
    

### List All Problems [GET]

+ Response 200 (application/json)

        [
            {
                "name":"Dreamoon and Sets",
                "index":"B",
                "contest_id":477,
                "tags":["math"],
                "points":300
            },
            {
                "name":"New Year Present",
                "index":"B",
                "contest_id":379,
                "tags":["constructive algorithms", "implementation"],
                "points":300
            },
            {
                "name":"Riding in a Lift",
                "index":"C",
                "contest_id":480,
                "tags":["dp", "implementation"],
                "points":600
            },
        ]

## Single Problem [/problems/{problem_id}]
Returns a single problem object when a string problem id is specified.

+ Parameters
    + problem_id (string) - Unique id of the specified problem. 
    Represented as contest_id followed by problem index. 
    e.g. 377C - contest 377, problem C.

### Get Problem by ID [GET]

+ Response 200 (application/json)

        {
            "name":"Dreamoon and Sets",
            "index":"B",
            "contest_id":477,
            "tags":["math"],
            "points":300
        }
